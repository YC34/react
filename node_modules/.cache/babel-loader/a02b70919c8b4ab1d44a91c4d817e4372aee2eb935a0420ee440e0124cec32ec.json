{"ast":null,"code":"var _jsxFileName = \"/Users/y_chan/Documents/GitHub/react/src/ch05.styling_example/App_button_01.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledButton = styled.button`\n\t/* 공통 스타일 */\n\tdisplay: inline-flex;\n\toutline: none;\n\tborder: none;\n\tborder-radius: 4px;\n\n\t/* color: white; */\n\tcolor: ${props => props.color || 'white'};\n\tfont-weight: bold;\n\tcursor: pointer;\n\tpadding-left: 1rem;\n\tpadding-top: 0.5rem; // 신규 추가됨\n\tpadding-right: 1rem;\n\n\t/* 크기 */\n\theight: 2.25rem;\n\tfont-size: 1rem;\n\n\t/* 색상 */\n\t/* background: #228be6; */\n\t/* || 연산자는 추출할 요소가 없을 때 기본 값을 지정해 줍니다.*/\n\tbackground: ${props => props.background || 'yellow'};\n\n\t/* hover는 mousein + mouseout */\n\t&:hover {\n\t\tbackground: green;\n\t}\n\n\t/* active는 마우스 클릭되었을 때 ... */\n\t&:active {\n\t\tbackground: red;\n\t}\n\n\t/* 기타 */\n\t& + & {\n\tmargin-left: 1rem;\n\t}\n`;\n\n/* children은 예약된 키워드이고, prop_list은 임의의 이름이어도 상관 없습니다. */\n_c = StyledButton;\nfunction Button(_ref) {\n  let {\n    children,\n    ...prop_list\n  } = _ref;\n  // children는 넘어 오는 문자열입니다. (예시 : 버튼(Button))\n  console.log('넘어 오는 문자열 : ' + children);\n\n  // prop_list는 prop 목록을 의미합니다.\n  console.log(JSON.stringify(prop_list));\n\n  //\" 확인\"이라는 글자가 보여야 하고, prop_list 속성이 적용이 되어야 합니다.\n  return /*#__PURE__*/_jsxDEV(StyledButton, {\n    ...prop_list,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_c2 = Button;\nexport default Button;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledButton\");\n$RefreshReg$(_c2, \"Button\");","map":{"version":3,"names":["React","styled","StyledButton","button","props","color","background","Button","children","prop_list","console","log","JSON","stringify"],"sources":["/Users/y_chan/Documents/GitHub/react/src/ch05.styling_example/App_button_01.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n\t/* 공통 스타일 */\n\tdisplay: inline-flex;\n\toutline: none;\n\tborder: none;\n\tborder-radius: 4px;\n\n\t/* color: white; */\n\tcolor: ${props => props.color || 'white'};\n\tfont-weight: bold;\n\tcursor: pointer;\n\tpadding-left: 1rem;\n\tpadding-top: 0.5rem; // 신규 추가됨\n\tpadding-right: 1rem;\n\n\t/* 크기 */\n\theight: 2.25rem;\n\tfont-size: 1rem;\n\n\t/* 색상 */\n\t/* background: #228be6; */\n\t/* || 연산자는 추출할 요소가 없을 때 기본 값을 지정해 줍니다.*/\n\tbackground: ${props => props.background || 'yellow'};\n\n\t/* hover는 mousein + mouseout */\n\t&:hover {\n\t\tbackground: green;\n\t}\n\n\t/* active는 마우스 클릭되었을 때 ... */\n\t&:active {\n\t\tbackground: red;\n\t}\n\n\t/* 기타 */\n\t& + & {\n\tmargin-left: 1rem;\n\t}\n`;\n\n/* children은 예약된 키워드이고, prop_list은 임의의 이름이어도 상관 없습니다. */\nfunction Button({ children, ...prop_list }) {\n\t// children는 넘어 오는 문자열입니다. (예시 : 버튼(Button))\n\tconsole.log('넘어 오는 문자열 : ' + children);\n\n\t// prop_list는 prop 목록을 의미합니다.\n\tconsole.log(JSON.stringify(prop_list));\n\n\t//\" 확인\"이라는 글자가 보여야 하고, prop_list 속성이 적용이 되어야 합니다.\n\treturn <StyledButton {...prop_list}>{children}</StyledButton>;\n}\n\nexport default Button;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AAAC;AAEvC,MAAMC,YAAY,GAAGD,MAAM,CAACE,MAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAUC,KAAK,IAAIA,KAAK,CAACC,KAAK,IAAI,OAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeD,KAAK,IAAIA,KAAK,CAACE,UAAU,IAAI,QAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAA,KAxCMJ,YAAY;AAyClB,SAASK,MAAM,OAA6B;EAAA,IAA5B;IAAEC,QAAQ;IAAE,GAAGC;EAAU,CAAC;EACzC;EACAC,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGH,QAAQ,CAAC;;EAEtC;EACAE,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC,CAAC;;EAEtC;EACA,oBAAO,QAAC,YAAY;IAAA,GAAKA,SAAS;IAAA,UAAGD;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAgB;AAC9D;AAAC,MATQD,MAAM;AAWf,eAAeA,MAAM;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}